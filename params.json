{"name":"AtgAnt","tagline":"ATG Ant tasks","body":"AtgAnt\r\n======\r\n\r\nAtgAnt is a set of build tools for making the compilation of ATG Dynamo projects much easier. As its name suggests, AtgAnt uses Apache Ant. AtgAnt is based on the [project of the same name][atgantsfnet].\r\n\r\nInstallation\r\n------------\r\n\r\nFirst, download the source code:\r\n\r\n    git clone https://github.com/jvz/atg-ant-plugin.git\r\n\r\nNext, build the project:\r\n\r\n    ./gradlew build\r\n\r\nFinally, copy the generated `atgant-*.jar` to your project somewhere like `lib`:\r\n\r\n    cp build/libs/atgant-*.jar path/to/project/lib/atgant.jar\r\n\r\nIn the future, you will be able to download the JAR via Ivy, Maven, Gradle, etc., although doesn't that defeat the purpose of using Ant? I don't think so! We can use different build systems for different projects. See also [atg-gradle-plugin][atgplugin].\r\n\r\nUsage\r\n-----\r\n\r\nThe following is your ideal build.xml file:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project name=\"base\" default=\"clean-build\">\r\n    <property name=\"atg.home\" value=\"${user.home}/ATG/ATG11.0\"/>\r\n    <taskdef resource=\"atgant.xml\" classpath=\"lib/atgant.jar\"/>\r\n\r\n    <target name=\"clean-build\" description=\"Clean and build directory\">\r\n        <subant target=\"clean-build\" genericantfile=\"atg-module-build.xml\">\r\n            <atgRequiredModules\r\n                    atgHome=\"${atg.home}\"\r\n                    modules=\"proj3,proj1\"\r\n                    filters=\"proj*,base\"/>\r\n        </subant>\r\n    </target>\r\n</project>\r\n```\r\n\r\nThe `taskdef` command loads in the new AtgAnt tasks. You should point the `classpath` attribute of this task at the location of the `atgant.jar` file.\r\n\r\nThe `atgRequiredModules` task provides a list of atg modules referenced by the two modules given, using their `META-INF/MANIFEST.MF`'s `ATG-Required` entries. The filters make sure we only run the projects with the given names.\r\n\r\nThe code uses the list of ATG Modules to run another ant script `atg-module-build.xml` over each of the found modules\r\n\r\nThe `atg-module-build.xml` file looks like this\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project name=\"base\" default=\"clean-build\">\r\n    <property name=\"src.dir\" value=\"src\"/>\r\n    <property name=\"build.dir\" value=\"classes\"/>\r\n\r\n    <target name=\"-init\">\r\n        <available property=\"src.dir.exists\" file=\"${src.dir}\" type=\"dir\"/>\r\n        <atgModuleName atgHome=\"${atg.home}\" property=\"module.name\" module=\".\"/>\r\n        <echo message=\"ATG Module ${module.name}\"/>\r\n    </target>\r\n\r\n    <target name=\"-clean\">\r\n        <delete dir=\"${build.dir}\"/>\r\n    </target>\r\n\r\n    <target name=\"-compile-java\" if=\"src.dir.exists\">\r\n        <mkdir dir=\"${build.dir}\"/>\r\n        <javac srcdir=\"${src.dir}\"\r\n               destdir=\"${build.dir}\"\r\n               debug=\"on\">\r\n            <classpath>\r\n                <atgClasspath atgHome=\"${atg.home}\" modules=\".\"/>\r\n            </classpath>\r\n        </javac>\r\n    </target>\r\n\r\n    <target name=\"-build\" depends=\"-compile-java\"/>\r\n\r\n    <target name=\"clean-build\" depends=\"-init,-clean,-build\"\r\n            description=\"Clean and Build module\"/>\r\n\r\n</project>\r\n```\r\n\r\nThis file will compile a single ATG Module, and the previous file runs this ant script over all of your project's modules\r\n\r\nThe `atgModuleName` task is used to get the name of a particular module, in this case the module \".\" -- this is a special name which means my current build directory. Because this script is run over each module, it will print out the name of the module it's current working on.\r\n\r\nThe `atgClasspath` task generates the classpath of the current module. This is the classes listed in the module's `META-INF/MANIFEST.MF` file `ATG-Class-Path` entries, plus the `ATG-Class-Path` of all the modules this module is dependent on.\r\n\r\nMore details on these commands is given later\r\n\r\nThis system could be extended to perform other ATG module related tasks, such as running code quality tests or jsp compilation.\r\n\r\nAtgClasspath task\r\n-----------------\r\n\r\n### Description\r\n\r\nGets the classpath for one or more ATG modules\r\n\r\nThe classpath is generated by referencing the modules' `META-INF/MANIFEST.MF` file's `ATG-Class-Path` entries. If the modules reference other modules using `ATG-Required` entries, then those modules are added to the classpath. This happens recursively.\r\n\r\nThe classpath built is in the same order as that will be used by ATG when the module is run.\r\n\r\nThe command is mainly used to generate the classpath for compiling the java code in a module. It could also be used for the classpath for [JUnit][junit] tests run against the code in the module.\r\n\r\n### Parameters\r\n\r\n* `atgHome`\r\n  - The directory into which ATG has been installed.\r\n  - Required.\r\n* `modules`\r\n  - A list of modules you want to include into the classpath, separated by commas, semi-colons or colons. The module \".\" means the current ant base directory. You can use simple wildcards such as `mod*` to indicate all modules starting with \"mod\", or `mod**` to mean all modules, including in subdirectories, starting with \"mod\". For example, `module1.base` would be matched by `mod**` but not by `mod*`.\r\n  - Optional. Default is \".\"\r\n* `filters`\r\n  - Archive file to expand.\r\n  - Optional.\r\n\r\nAtgModuleName task\r\n------------------\r\n\r\n### Description\r\n\r\nGets the name of the ATG module given to it.\r\n\r\nThe name of a module is its name as would be recognised by another ATG module: e.g., `PublishingAgent.base`.\r\n\r\nThe command is mainly used to get the name of the module which is the current Ant base directory, but it could be used simply to convert directory names from the system format classpath to ATG's dot notation.\r\n\r\n### Parameters\r\n\r\n* `atgHome`\r\n  - The directory into which ATG has been installed.\r\n  - Required.\r\n* `module`\r\n  - The module whose name is being sought.\r\n  - Optional. Default is \".\"\r\n* `dir`\r\n  - The directory of the module whose name is being sought. You can not specify both `dir` and `module`.\r\n  - Optional. Default is the value from `module`.\r\n\r\nAtgRequiredModules task\r\n-----------------------\r\n\r\n### Description\r\n\r\nGets the list of modules need by (and including) the modules given.\r\n\r\nThe classpath is generated by referencing the modules' `META-INF/MANIFEST.MF` file's `Required` entries. This happens recursively.\r\n\r\nThe classpath built is in the same order as that will be used by ATG when the module is run, with the base modules appearing first.\r\n\r\nThe command is mainly used to generate a list of modules that need to be compiled for a particular system. For example, if you provide your top level module or list of modules to make a .ear, then it will list all the modules that need to be compiled.\r\n\r\nThis list will include your custom modules, and ATG's proprietary modules. You may need to use the `filter` parameter to restrict the list of modules returned\r\n\r\n### Parameters\r\n\r\n* `atgHome`\r\n  - The directory into which ATG has been installed.\r\n  - Required.\r\n* `modules`\r\n  - A list of modules you want to include into the classpath, separated by commas, semi-colons or colons. The module \".\" means the current ant base directory. You can use simple wildcards such as `mod*` to indicate all modules starting with \"mod\", or `mod**` to mean all modules, including in subdirectories, starting with \"mod\". For example, `module1.base` would be matched by `mod**` but not by `mod*`.\r\n  - Optional. Default is \".\"\r\n* `filters`\r\n  - Archive file to expand.\r\n  - Optional.\r\n\r\nNotes\r\n-----\r\n\r\nDeveloped by Piran Montford, with the kind help of e2x Ltd. Updated by @jvz.\r\n\r\nWarranty\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE DEVELOPERS OR ANY OTHER CONTRIBUTOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n[atgplugin]: https://github.com/jvz/atg-gradle-plugin\r\n[atgantsfnet]: http://atgant.sf.net/\r\n[junit]: http://junit.org/","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}